// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return FirebaseOptions(
        apiKey: _read('API_KEY'),
        appId: _read('APP_ID'),
        messagingSenderId: _read('MESSAGING_SENDER_ID'),
        projectId: _read('PROJECT_ID'),
        authDomain: dotenv.env['AUTH_DOMAIN'],
        storageBucket: dotenv.env['STORAGE_BUCKET'],
        measurementId: dotenv.env['MEASUREMENT_ID'],
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return FirebaseOptions(
          apiKey: _read('API_KEY'),
          appId: _read('APP_ID'),
          messagingSenderId: _read('MESSAGING_SENDER_ID'),
          projectId: _read('PROJECT_ID'),
          storageBucket: dotenv.env['STORAGE_BUCKET'],
        );
      case TargetPlatform.iOS:
        return FirebaseOptions(
          apiKey: _read('API_KEY'),
          appId: _read('APP_ID'),
          messagingSenderId: _read('MESSAGING_SENDER_ID'),
          projectId: _read('PROJECT_ID'),
          storageBucket: dotenv.env['STORAGE_BUCKET'],
          iosBundleId: 'com.example.qrio',
        );
      case TargetPlatform.macOS:
        return FirebaseOptions(
          apiKey: _read('API_KEY'),
          appId: _read('APP_ID'),
          messagingSenderId: _read('MESSAGING_SENDER_ID'),
          projectId: _read('PROJECT_ID'),
          storageBucket: dotenv.env['STORAGE_BUCKET'],
          iosBundleId: 'com.example.qrio',
        );
      case TargetPlatform.windows:
        return FirebaseOptions(
          apiKey: _read('API_KEY'),
          appId: _read('APP_ID'),
          messagingSenderId: _read('MESSAGING_SENDER_ID'),
          projectId: _read('PROJECT_ID'),
          authDomain: dotenv.env['AUTH_DOMAIN'],
          storageBucket: dotenv.env['STORAGE_BUCKET'],
          measurementId: dotenv.env['MEASUREMENT_ID'],
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static String _read(String key) {
    final value = dotenv.env[key];
    if (value == null || value.isEmpty) {
      throw StateError('Missing env var "$key" for FirebaseOptions');
    }
    return value;
  }
}
